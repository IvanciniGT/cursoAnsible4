-   name:               Quiero NGINX Arriba !!!!!
    hosts:              localhost
    gather_facts:       false
    become:             true # Haz las operaciones con sudo. Esto trabaja en conjunto con otra propiedad que es become_method=sudo | su root
    vars:
        nginx:
            version:    1.14*
        web:
            repo:       https://github.com/IvanciniGT/webEjemploAnsible
            dominio:    mipaginita.com
            puerto:     8080
            carpeta:    /home/ubuntu/environment/datos/web
            tests:
                      - end_point:      /index.html
                        status_code:    200
                        respuesta:      Soy el fichero de la WEB
                        
                      - end_point:      /
                        status_code:    200
                        respuesta:      version
                        
        email:          ivan.osuna.ayuste@gmail.com

    pre_tasks:
    
        -   name:       Obtener el SO de la máquina sobre la que trabajo
            setup:      # Esto me rellena el ansible_facts
                gather_subset: 
                      - distribution
            tags:
                      - always  # Este es un tag especial de ANSIBLE
                      
            
        -   name:       Asegurar que estamos en un entorno ubuntu
                        # Detengo el PLAY para el host                  
            meta:       end_host
            when:       ansible_facts.distribution != "Ubuntu" # si la máquina NO ES UBUNTU [sistema_operativo]
            tags:
                      - always  # Este es un tag especial de ANSIBLE
                    
        -   name:       Asegurar que tengo los repos de apt actualizados
            apt:
                update_cache: true
            changed_when:       false
            tags:
                      - despliegue
                      - instalacion

        -   name:       Asegurar que git queda instalado en el entorno
            apt:
                name:   git
                state:  present
            tags:
                      - despliegue

    tasks:
    
        -   name:       Asegurar que NGINX queda instalado en el entorno
            apt:
                name:   "nginx={{nginx.version}}"
                state:  present
            tags:     
                      - instalacion
                      
        -   name:       Asegurar que NGINX queda configurado como necesito para mi web
            template:
                src:    ./configuracion.nginx.conf
                dest:   /etc/nginx/sites-available/default
                mode:   '0644'
            notify:     REINICIO_REQUERIDO
            tags:     
                      - configuracion

        -   name:       Asegurar que la carpeta para la web está creada 
            file:
                path:   "{{ web.carpeta }}"
                state:  directory
            tags:
                      - despliegue

        -   name:       Asegurar que la última versión del repo está descargada en la carpeta
            git:
                repo:   '{{ web.repo }}'
                dest:   "{{ web.carpeta }}"
            notify:     REINICIO_REQUERIDO
            tags:
                      - despliegue

        -   name:       Asegurar que el servidor web queda arrancado
            service:
                name:   nginx
                state:  started
            register:   arranque
            tags:
                      - despliegue

    post_tasks:
    
        -   name:           Validaciones finales
            block:
            
              - name:       Asegurarme que el servidor web está arrancado
                shell:
                    cmd:    "[ $(ps -eaf | grep -c nginx) -gt 1 ]" # Devuel un codigo de respuesta 0 o 1 en función de si nginx corre o no
                changed_when:   false
                tags:
                          - pruebas
                          - always
                          
              - name:       Asegurar que el servidor web ha abierto el puerto adecuado
                wait_for:
                    port:   "{{ web.puerto }}"
                    timeout: 60
                tags:
                          - pruebas
                          - always
                          
              - name:       Asegurar que el servidor web sirve la web en ese puerto
                uri:
                    url:    "http://localhost:{{ web.puerto }}/{{ item.end_point }}"
                    method: GET
                    status_code: "{{ item.status_code }}"
                    return_content: true
                # TODO register:   peticion_local
                
                loop:       "{{ web.tests }}" # A cada elemento le da el nombre de variable "item"
                tags:
                          - pruebas
                          - always
                          
              - name:       Asegurar que la web está en funcionamiento desde fuera del host remoto
                uri:
                    url:    "http://{{ web.dominio }}:{{ web.puerto }}/{{ item.end_point }}"
                    method: GET
                    status_code: "{{ item.status_code }}"
                    return_content: true
                delegate_to:    localhost       # Esta tarea no quiero que se haga en el remoto... sino en el controlador
                loop:       "{{ web.tests }}"
                tags:
                          - pruebas
                          - always

            rescue:
              - name:       Enviar email en caso de fallo
                mail:
                    host:       localhost
                    port:       1025
                    #username:  username@gmail.com
                    #password:  mysecret
                    from:       sistema.notificacion@marrones.com
                    to:         "Administardor JEFE de resolución de problemas <{{ email }}>"
                    subject:    Follón gordo !!!!! Esto ha petao !!!
                    body:       "La instalación en {{ ansible_hostname }} ha fallao pero bien !!!!"
                ignore_errors:  true
                tags:
                          - notificacion
                
              - name:       Dar el playbook por fallido
                fail:
                    msg:    "La instalación en {{ ansible_hostname }} ha fallao pero bien !!!!"
                tags:
                          - always
                          
    handlers:
    
        -   name:       Asegurar que nginx queda reiniciado
            service:
                name:   nginx
                state:  restarted
            when:       arranque is not changed
            listen:
                      - REINICIO_REQUERIDO
