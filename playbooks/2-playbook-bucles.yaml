-   hosts:          localhost
    gather_facts:   false
    
    vars:
        lista_sencilla:
            - item 1
            - item 2
            - item 3
        
        # Quiero.... tener una variable con una serie de programas
        # que voy a instalar... y cada uno de esos programas puede
        # o no tener un puerto, que habrá que abrir en un firewall
        
        programas_lista_de_mapas:   #########
            -   nombre: nginx       #
                puerto: 80          #   GENIAL !!!!
            -   nombre: mariadb     #   MUY EXPLICITA !!!!
                puerto: 3306       #       Y MANTENIBLE !
            #-   nombre: nginx       #       MUY EXTENSIBLE
            #    puerto: 81          # Esta tiene una ligera desventaja
                                    # Es menos a prueba de DESPISTAOS !
        
        programa_y_su_puerto:       #######
            nginx:                  #
                puerto: 80          #   No está tan mal
            mariadb:                #
                puerto: 3306        #   Explicita
            #nginx:                  #
            #    puerto: 81          #
        
        mierda:                     #######
            -   -   nginx           #
                -   80              #   MIERDA ENORME !!!!!
            -   -   mariadb         #   Qué es cada dato?
                -   3306            #   Por qué? DE NUVO NO ES EXPLICITA !!!!
        
        solo_programas:     ####
            - nginx         # 
            - mariadb       #   MIERDA GIGANTE !!!!!
                            #       La relación entre programa y puerto
        solo_puertos:       #       NO ES EXPLICITA !
            - 80            #   Dificulta el mantenimiento MUCHO !!!!
            - 3306          #
            
        # La decisión es mia... pero una vez tomada... 
        # voy a tener que vivir con esa decisión!!!
        
    tasks:
        -   name:       Tarea que se ejecuta para todos los elementos de una lista
            debug:
                msg: |
                        Soy el elemento: {{ item }}
                
            loop: "{{ lista_sencilla }}"
            

        -   name:       Tarea que muestra cada programa con su puerto (desde una lista)
            debug:
                msg: |
                        Soy el programa: {{ item.nombre }} y tengo el puerto: {{ item.puerto }}
                
            loop: "{{ programas_lista_de_mapas }}"
            # Tengo una variable llamada:  item
            # Cuya esctura será?
            #    item:
            #        nombre: nginx
            #        puerto: 80

        -   name:       Tarea que muestra cada programa con su puerto (desde un diccionario)
            debug:
                msg: |
                        Soy el programa: {{ item.key }} y tengo el puerto: {{ item.value.puerto }}
                
            #loop: "{{ programa_y_su_puerto }}"            
            # Tengo una variable llamada:  OSTION EN TO LOS MORROS !!!!!
            # UPS !!!
            # En Ansible no podemos usar un diccionario dentro de un loop... NO SE PUEDE !
            # SOLUCION ? 
            # Convertir el diccionario a una lista !
            loop: "{{ programa_y_su_puerto | dict2items }}"            
            # Y eso lo hacemos con un pipe de JINJA, llamado dict2items
            #    DICCIONARIO                             LISTA
            #    programa_y_su_puerto:                    
            #        nginx:                              - key: nginx
            #            puerto: 80                        value: 
            #                                                puerto: 80
            #        mariadb:                            - key: mariadb
            #            puerto: 3306                      value:
            #                                                puerto: 3306
            # Tengo una variable llamada: item
            # Cuya esctura será?
            #   key: nginx
            #   value: 
            #       puerto: 80
            
        -   name:       Listar programas con SUS PUERTOS
            debug:
                msg: |
                        Soy el programa: {{ item[0].nombre }} y tengo el puerto: {{ item[1] }}
            loop: "{{ programas | subelements('puertos') }}"
            vars:
                programas:
                    -   nombre: nginx
                        puertos: 
                            - 80
                            - 443
                    -   nombre: mariadb
                        puertos: 
                            - 3306   

            # En python...
            # bucle dentro de otro bucle
            # Por cada programa en la lista de programas:
            #   Por cada puerto en la lista de puertos de ese programa:
            #       Imprimo!
            # En Ansible no puedo anidar LOOPs. NO ESTA DISPONIBLE ESA FUNCION !
            
            # SOLUCION? 
            # De alguna forma GENERAR UNA LISTA DONDE TENGA TODOS LO QUE NECESITO... 
            # en mi caso los 3 elementos.. y ya la proceso
            # En este caso, para bucles anidados, usamos: el pipe subelements
            # ITEM????
            #        -   nombre: mariadb
            #            puertos: 
            #                - 3306
            #        -   3306
            # Que hace subelements
            #
            #    -   -   nombre: nginx
            #            puertos: 
            #                - 80
            #                - 443
            #        -   80
            #    -   -   nombre: nginx
            #            puertos: 
            #                - 80
            #                - 443
            #        -   443
            #    -   -   nombre: mariadb
            #            puertos: 
            #                - 3306
            #        -   3306
            

            
        -   name:       Listar programas con SUS PUERTOS (desde mapa)
            debug:
                msg: |
                        Soy el programa: {{ item[0].key }} y tengo el puerto: {{ item[1] }}
            loop: "{{ programas | dict2items | subelements('value.puertos') }}"
            vars:
                programas:
                    nginx:
                        puertos: 
                            - 80
                            - 443
                    mariadb:
                        puertos: 
                            - 3306   
                            
                            
            #        -   key: nginx
            #            value:
            #                puertos: 
            #                    - 80
            #                    - 443                   
            #            vvvv
            #        -   -   key: nginx
            #                value:
            #                    puertos: 
            #                        - 80
            #                        - 443
            #            -   80
            #        -   -   key: nginx
            #                value:
            #                    puertos: 
            #                        - 80
            #                        - 443
            #            -   443
            #            
    # En resumen... que decisión me interesa tomar? Cómo estructuraré la variable? 
    # Qué criterio aplico para decidir la forma en la que me interesa estructurar la variable?
    # ME FIJO EN SI ME VA A SER MAS SENCILLO DE PROCESAR? NO
    # Para eso hemos aprendido a procesar variables de distinta naturaleza
    # LEGIBILIDAD y MANTENIBILIDAD <<< POR ENCIMA DE TODO !

# Me temo que esto no es todo....
# En ocasiones yo decido la estructura de las variables que voy a manejar...
# En ocasiones ANSIBLE YA LO HA DECIDIDO POR MI !

        -   name: Ejecutar comandos
            shell:
                cmd:    "{{ item }}"
            loop:   "{{ comandos }}"
            register: salida
            ignore_errors: true
            vars:
                comandos:
                    - echo Hola
                    - echo Adios
                    - clear
                    - explosion de narices
        
        -   name: Salida del comando anterior
            debug:
                var: salida
        
        -   name: Comandos que han fallado
            debug:
                msg: |
                        El comando: {{ item.item }} ha fallado.... :(
            when: item.failed
            loop: "{{ salida.results }}"










        -   name:       Listar programas con SUS PUERTOS
            shell:
                cmd: >
                    netstat -lnt 
                    | grep -c ":{{item[1]}} "    
            loop: "{{ programas | dict2items | subelements('value.puertos') }}"
            register: estado_puertos
            failed_when: false
            changed_when: false
            vars:
                programas:
                    nginx:
                        puertos: 
                            - 80
                            - 443
                    mariadb:
                        puertos: 
                            - 3306
                    jenkins:
                        puertos:
                            - 8081
                            - 30000

        -   name:
            debug:
                msg: |
                        El programa: "{{ item }}" tiene algún puerto jodido!
            loop: >
                    {{ estado_puertos.results 
                        | selectattr("rc", "equalto", 1) 
                        | map(attribute='item') 
                        | map('first')  
                        | map(attribute='key') 
                        | unique 
                        | list }}
                        

        # Vamos a convertir: estado_puertos... 300 lineas de datos... en la lista: ["nginx", "jenkins"]
        # selectattr: Me filtra de una lista los items que validan una condición
        # list, convierte algo a una lista... En nuestro caso, forzamos la ejecución del selectattr
        # map... genera una lista conteniendo el resultado de aplicar una función sobre cada elemento de una lista de entrada
        # [1,2,3] -> Map (cada elemento x 2) -> [2,4,6]

        -   name:
            debug:
                msg: |
                        El texto: {{ contenido }} contiene la palabra "texto" ? 
                        {{ "fichero" in contenido }}
            vars:
                contenido: Soy el fichero de la WEB, version 4!!!!!!     